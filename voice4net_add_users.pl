#!/usr/bin/perl

# To install dependencies:
# 	cpan JSON::Parse
# 	cpan Getopt::Long

#[
#	{
#		"id": "2002",
#		"password": "foo",
#		"a1_hash": null,
#		"caller_id_name": "Bilbo Baggins"
#	},
#	{
#		"id": "2002",
#		"password": null,
#		"a1_hash": "460571a3f184086555603946379ab588",
#		"caller_id_name": "Froto Baggins"
#	},
#]

use strict;
use warnings;
use JSON::Parse ':all';
use Getopt::Long;

my $config_path;
my $domain;
my $output_filename;
my $path_sep = '/';
my $user_template;
my $new_user_count = 0;

if (!$ARGV[0]) {
	die "You must specify a users JSON string as a command line argument to add users.\n";
}

my $json = $ARGV[0];

if (!valid_json ($json)) {
	die "You must specify a valid users JSON string as a command line argument to add users.\n";
}

GetOptions(
   'domain=s'       => \$domain,
   'confpath=s'     => \$config_path,
   'output-file=s'  => \$output_filename
);

if ( ! $domain ) {
  $domain='default';
}

if ( ! $config_path ) {
  $config_path = '/etc/freeswitch';
}

if ( ! $output_filename ) {
  $output_filename = 'voice4net_users.xml';
}

unless ( -d $config_path ) {
	die "Configuration path '$config_path' does not exist.\n";
}

my $directory_path = $config_path . $path_sep . 'directory';
unless ( -d $directory_path ) {
	die "Directory path '$directory_path' does not exist.\n";
}

## Full directory path includes the domain name
my $full_dir_path = $directory_path . $path_sep . $domain;
unless ( -d $full_dir_path ) {
	die "Full path to directory and domain '$full_dir_path' does not exist. \n";
}

unless ( -w $full_dir_path ) {
	die "This user does not have write access to '$full_dir_path'.\n";
}

my $users_file_name = $full_dir_path . $path_sep . $output_filename;

if ( -f $users_file_name ) {
	warn "$users_file_name exists, removing...\n";
	unlink $users_file_name;
}

my $users = parse_json ($json);

if (&print_header()<0) {
	die "Unable to write to '$users_file_name'.\n";
}

for my $user (@$users) {

	my $password;
	my $number_alias;
	my $vm_password;

	# is id not numeric?
	if ($user->{id} !~ /^\d+$/) {
		# is id alphanumeric and number_alias numeric ?
		if ($user->{id} =~ /^[A-Za-z0-9]+$/ && $user->{number_alias} =~ /^[1-9]\d+$/) {
			$number_alias=$user->{number_alias};
		}
		else {
			next;
		}
	}

	if ($user->{a1_hash}) {
		$user_template = &get_hashed_password_user_template;
		$password=$user->{a1_hash};
	}
	else {
		$user_template = &get_user_template;
		$password=$user->{password};
	}

	if ($user->{vm_password}) {
		$vm_password=$user->{vm_password};
	}
	else {
		if ($number_alias) {
			$vm_password=$number_alias;
		}
		else {
			$vm_password=$user->{id};
		}
	}

	&add_user($user->{id},$number_alias,$password,$user->{caller_id_name},$vm_password);
}

&print_footer();

print "\nOperation complete. ";
if ( $new_user_count == 0 ) {
  print "No users added.\n";
  exit(0);
} else {
  printf "%d user%s added.\n", $new_user_count, $new_user_count==1 ? "" : "s";
  print "Be sure to reloadxml.\n";
}

exit(0);

sub print_header {
	my $fh;
	open($fh,'>',$users_file_name);
	if ( ! $fh ) {
		return -1;
	}
	print $fh "<!--\n";
	print $fh "****************************************************************\n";
	print $fh "* This xml configuration file was auto-generated by Voice4Net. *\n";
	print $fh "* Changes to this file may cause incorrect behavior and will   *\n";
	print $fh "* be lost if the configuration is regenerated.                 *\n";
	print $fh "****************************************************************\n";
	print $fh "-->\n";
	print $fh "<include>\n";
	close($fh);
	return 0;
}

sub print_footer {
	my $fh;
	open($fh,'>>',$users_file_name);
	if ( ! $fh ) {
		return -1;
	}
	print $fh "</include>\n";
	close($fh);
	return 0;
}

sub add_user {
	my $user_id = shift;
	my $number_alias = shift;
	my $user_password = shift;
	my $caller_id_name = shift;
	my $vm_password = shift;

	my $new_user = $user_template;
	$new_user =~ s/__USERID__/$user_id/g;
	$new_user =~ s/__PASSWORD__/$user_password/g;
	$new_user =~ s/__CALLER_ID_NAME__/$caller_id_name/g;
	$new_user =~ s/__VMPASSWORD__/$vm_password/g;

	if ( $number_alias ) {
		$new_user =~ s/<user id="$user_id">/<user id="$user_id" number-alias="$number_alias">/g;
	}

	my $fh;
	open($fh,'>>',$users_file_name);
	if ( ! $fh ) {
		return -1;
	}

	print $fh $new_user;
	close($fh);
	print "Added $user_id to $users_file_name\n";
	$new_user_count++;
}

sub get_user_template {
	my $templ = <<ENDUSERTEMPLATE;
    <user id="__USERID__">
        <params>
            <param name="password" value="__PASSWORD__"/>
            <param name="vm-password" value="__VMPASSWORD__"/>
        </params>
        <variables>
            <variable name="accountcode" value="__USERID__"/>
            <variable name="effective_caller_id_name" value="__CALLER_ID_NAME__"/>
            <variable name="effective_caller_id_number" value="__USERID__"/>
            <variable name="outbound_caller_id_name" value="\$\${outbound_caller_name}"/>
            <variable name="outbound_caller_id_number" value="\$\${outbound_caller_id}"/>
        </variables>
    </user>
ENDUSERTEMPLATE

	return $templ;
}

sub get_hashed_password_user_template {
	my $templ = <<ENDUSERTEMPLATE;
    <user id="__USERID__">
        <params>
            <param name="a1-hash" value="__PASSWORD__"/>
            <param name="vm-password" value="__VMPASSWORD__"/>
        </params>
        <variables>
            <variable name="accountcode" value="__USERID__"/>
            <variable name="effective_caller_id_name" value="__CALLER_ID_NAME__"/>
            <variable name="effective_caller_id_number" value="__USERID__"/>
            <variable name="outbound_caller_id_name" value="\$\${outbound_caller_name}"/>
            <variable name="outbound_caller_id_number" value="\$\${outbound_caller_id}"/>
        </variables>
    </user>
ENDUSERTEMPLATE

	return $templ;
}
